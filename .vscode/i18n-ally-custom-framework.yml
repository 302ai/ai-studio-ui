# .vscode/i18n-ally-custom-framework.yml

# An array of strings which contain Language Ids defined by VS Code
# You can check available language ids here: https://code.visualstudio.com/docs/languages/identifiers
languageIds:
  - javascript
  - typescript
  - javascriptreact
  - typescriptreact
  - svelte
  - svelte.ts
  - svelte.js

# An array of RegExes to find the key usage. **The key should be captured in the first match group**.
# You should unescape RegEx strings in order to fit in the YAML file
# To help with this, you can use https://www.freeformatter.com/json-escape.html
usageMatchRegex:
  # Support for m.key() syntax like m.provider_icon() - only match i18n key patterns
  - "\\bm\\.([a-z_][a-z0-9_]*)\\(\\)(?!\\.[a-zA-Z])"
  # Support for m.key({...}) syntax with parameters like m.provider_fetch_models_success({...})
  - "\\bm\\.([a-z_][a-z0-9_]*)\\(\\s*\\{[^}]*\\}\\s*\\)(?!\\.[a-zA-Z])"

# A RegEx to set a custom scope range. This scope will be used as a prefix when detecting keys
# and works like how the i18next framework identifies the namespace scope from the
# useTranslation() hook.
# You should unescape RegEx strings in order to fit in the YAML file
# To help with this, you can use https://www.freeformatter.com/json-escape.html
# scopeRangeRegex:
#   - "m\\(\\s*\\[?\\s*['\"`](.*?)['\"`]"

# An array of strings containing refactor templates.
# The "$1" will be replaced by the keypath specified.
# Optional: uncomment the following two lines to use

refactorTemplates:
  - m.$1()

# If set to true, only enables this custom framework (will disable all built-in frameworks)
monopoly: true
