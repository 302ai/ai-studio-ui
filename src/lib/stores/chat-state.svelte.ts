import type { AttachmentFile, ChatMessage, MCPServer, Model } from "@/types/chat";
import { nanoid } from "nanoid";
export type { AttachmentFile, ChatMessage, MCPServer, Model } from "@/types/chat";

class ChatState {
	inputValue = $state("");
	attachments = $state<AttachmentFile[]>([]);
	messages = $state<ChatMessage[]>([]);
	mcpServers = $state<MCPServer[]>([]);
	isThinkingActive = $state(false);
	isOnlineSearchActive = $state(false);
	isMCPActive = $state(false);
	selectedModel = $state<Model | null>(null);
	isPrivateChatActive = $state(false);

	providerType = $derived<string | null>(this.selectedModel?.provider.name ?? null);
	sendMessageEnabled = $derived<boolean>(
		(this.inputValue.trim() !== "" || this.attachments.length > 0) && !!this.selectedModel,
	);
	hasMessages = $derived(this.messages.length > 0);

	sendMessage = () => {
		if (this.sendMessageEnabled) {
			const currentModel = this.selectedModel!;
			const userMessage: ChatMessage = {
				id: nanoid(),
				role: "user",
				content: this.inputValue,
				createAt: new Date(),
				status: "success",
				attachments: this.attachments,
				model: currentModel,
			};

			this.messages = [...this.messages, userMessage];
			this.inputValue = "";
			this.attachments = [];
			setTimeout(() => {
				const typingMessage: ChatMessage = {
					id: nanoid(),
					role: "assistant",
					content: "",
					createAt: new Date(),
					status: "pending",
					model: currentModel,
				};

				this.messages = [...this.messages, typingMessage];

				setTimeout(() => {
					const assistantMessage: ChatMessage = {
						id: typingMessage.id,
						role: "assistant",
						content: `# ü§ñ AI Âä©ÊâãÂõûÂ§çÁ§∫‰æã

ÊÑüË∞¢ÊÇ®ÁöÑÊèêÈóÆÔºÅÂΩìÂâçÊó∂Èó¥ÊòØ **${new Date().toLocaleString()}**

## üìù ÈóÆÈ¢òËß£Á≠î

ÊàëÊù•‰∏∫ÊÇ®Êèê‰æõËØ¶ÁªÜÁöÑËß£Á≠îÂíå‰ª£Á†ÅÁ§∫‰æãÔºö

### 1. ‰ª£Á†ÅÂÆûÁé∞Âª∫ËÆÆ

‰ª•‰∏ãÊòØ‰∏Ä‰∏™ React ÁªÑ‰ª∂ÁöÑÂÆåÊï¥Á§∫‰æãÔºö

\`\`\`jsx
import React, { useState, useEffect } from 'react';

const UserProfile = ({ userId }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchUserData(userId)
      .then(data => {
        setUser(data);
        setLoading(false);
      })
      .catch(error => {
        console.error('Ëé∑ÂèñÁî®Êà∑Êï∞ÊçÆÂ§±Ë¥•:', error);
        setLoading(false);
      });
  }, [userId]);

  if (loading) return <div>Âä†ËΩΩ‰∏≠...</div>;

  return (
    <div className="user-profile">
      <h2>{user?.name}</h2>
      <p>{user?.email}</p>
    </div>
  );
};

export default UserProfile;
\`\`\`

### 2. Python Êï∞ÊçÆÂ§ÑÁêÜÁ§∫‰æã

ÂØπ‰∫éÊï∞ÊçÆÂàÜÊûê‰ªªÂä°ÔºåÊàëÊé®Ëçê‰ΩøÁî®‰ª•‰∏ãÊñπÊ≥ïÔºö

\`\`\`python
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split

# Êï∞ÊçÆÈ¢ÑÂ§ÑÁêÜ
def preprocess_data(df):
    """
    Êï∞ÊçÆÈ¢ÑÂ§ÑÁêÜÂáΩÊï∞
    """
    # Â§ÑÁêÜÁº∫Â§±ÂÄº
    df = df.fillna(df.mean())

    # ÁâπÂæÅÊ†áÂáÜÂåñ
    from sklearn.preprocessing import StandardScaler
    scaler = StandardScaler()
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])

    return df

# Á§∫‰æãÁî®Ê≥ï
data = pd.read_csv('dataset.csv')
processed_data = preprocess_data(data)
print(f"Â§ÑÁêÜÂêéÁöÑÊï∞ÊçÆÂΩ¢Áä∂: {processed_data.shape}")
\`\`\`

### 3. ÈÖçÁΩÆÊñá‰ª∂Á§∫‰æã

\`\`\`yaml
# config.yaml
database:
  host: localhost
  port: 5432
  name: myapp_db
  user: admin
  password: secure_password

api:
  base_url: "https://api.example.com"
  timeout: 30
  retry_attempts: 3

features:
  - user_authentication
  - file_upload
  - real_time_notifications
\`\`\`

## üìä ÊÄßËÉΩÂØπÊØî

| ÊñπÊ°à | ÊÄßËÉΩ | Â§çÊùÇÂ∫¶ | Êé®ËçêÊåáÊï∞ |
|------|------|--------|----------|
| ÊñπÊ°àA | üü¢ È´ò | üü° ‰∏≠ | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| ÊñπÊ°àB | üü° ‰∏≠ | üü¢ ‰Ωé | ‚≠ê‚≠ê‚≠ê |
| ÊñπÊ°àC | üî¥ ‰Ωé | üî¥ È´ò | ‚≠ê‚≠ê |

## üîç ËØ¶ÁªÜÊ≠•È™§

### Á¨¨‰∏ÄÈò∂ÊÆµÔºöÈ°πÁõÆÂàùÂßãÂåñ
1. **ÂàõÂª∫È°πÁõÆÁõÆÂΩï**
   - ‰ΩøÁî® \`create-react-app\` Êàñ \`vite\` ÂàõÂª∫È°πÁõÆ
   - ÈÖçÁΩÆ ESLint Âíå Prettier

2. **ÂÆâË£ÖÂøÖË¶Å‰æùËµñ**
   \`\`\`bash
   npm install axios react-router-dom @mui/material
   npm install -D @types/react typescript
   \`\`\`

3. **ËÆæÁΩÆÈ°πÁõÆÁªìÊûÑ**
   \`\`\`text
   src/
   ‚îú‚îÄ‚îÄ components/
   ‚îÇ   ‚îú‚îÄ‚îÄ common/
   ‚îÇ   ‚îî‚îÄ‚îÄ pages/
   ‚îú‚îÄ‚îÄ hooks/
   ‚îú‚îÄ‚îÄ services/
   ‚îî‚îÄ‚îÄ utils/
   \`\`\`

### Á¨¨‰∫åÈò∂ÊÆµÔºöÊ†∏ÂøÉÂäüËÉΩÂºÄÂèë

> üí° **ÈáçË¶ÅÊèêÁ§∫Ôºö** Âú®ÂºÄÂèëËøáÁ®ã‰∏≠ÔºåËØ∑Á°Æ‰øùÈÅµÂæ™‰ª•‰∏ãÊúÄ‰Ω≥ÂÆûË∑µÔºö

- ‚úÖ ‰ΩøÁî® TypeScript ËøõË°åÁ±ªÂûãÂÆâÂÖ®
- ‚úÖ ÂÆûÁé∞ÈÄÇÂΩìÁöÑÈîôËØØÂ§ÑÁêÜ
- ‚úÖ ÁºñÂÜôÂçïÂÖÉÊµãËØï
- ‚úÖ ÈÅµÂæ™ SOLID ÂéüÂàô

### Á¨¨‰∏âÈò∂ÊÆµÔºöÊµãËØï‰∏éÈÉ®ÁΩ≤

ÂØπ‰∫éÊµãËØïÔºåÊàëÂª∫ËÆÆÈááÁî®‰ª•‰∏ãÁ≠ñÁï•Ôºö

\`\`\`javascript
// __tests__/UserProfile.test.js
import { render, screen, waitFor } from '@testing-library/react';
import UserProfile from '../UserProfile';

describe('UserProfile Component', () => {
  test('ÊòæÁ§∫Áî®Êà∑‰ø°ÊÅØ', async () => {
    const mockUser = {
      name: 'John Doe',
      email: 'john@example.com'
    };

    // Mock API Ë∞ÉÁî®
    jest.spyOn(global, 'fetch').mockResolvedValue({
      json: jest.fn().mockResolvedValue(mockUser)
    });

    render(<UserProfile userId="123" />);

    await waitFor(() => {
      expect(screen.getByText('John Doe')).toBeInTheDocument();
      expect(screen.getByText('john@example.com')).toBeInTheDocument();
    });
  });
});
\`\`\`

## üö® Â∏∏ËßÅÈóÆÈ¢ò‰∏éËß£ÂÜ≥ÊñπÊ°à

### Q1: ‰∏∫‰ªÄ‰πàÁªÑ‰ª∂‰∏çÊõ¥Êñ∞Ôºü

**A:** ËøôÈÄöÂ∏∏ÊòØÁä∂ÊÄÅÁÆ°ÁêÜÈóÆÈ¢òÔºåÊ£ÄÊü•‰ª•‰∏ãÂá†ÁÇπÔºö

- Á°Æ‰øù‰ΩøÁî® \`useState\` Êàñ \`useReducer\` Ê≠£Á°ÆÁÆ°ÁêÜÁä∂ÊÄÅ
- È™åËØÅ‰æùËµñÊï∞ÁªÑÊòØÂê¶Ê≠£Á°ÆËÆæÁΩÆ
- Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®Èó≠ÂåÖÈóÆÈ¢ò

### Q2: ÊÄßËÉΩ‰ºòÂåñÂª∫ËÆÆ

**A:** ‰ª•‰∏ãÊòØ‰∏Ä‰∫õÂÖ≥ÈîÆÁöÑ‰ºòÂåñÊäÄÂ∑ßÔºö

1. **‰ΩøÁî® React.memo Èò≤Ê≠¢‰∏çÂøÖË¶ÅÁöÑÈáçÊ∏≤Êüì**
2. **ÂÆûÁé∞ËôöÊãüÂåñÂ§ÑÁêÜÂ§ßÈáèÊï∞ÊçÆ**
3. **‰ΩøÁî® Web Workers Â§ÑÁêÜËÆ°ÁÆóÂØÜÈõÜÂûã‰ªªÂä°**

## üîó Áõ∏ÂÖ≥ËµÑÊ∫ê

- [React ÂÆòÊñπÊñáÊ°£](https://react.dev)
- [TypeScript ÊâãÂÜå](https://www.typescriptlang.org/docs/)
- [ÊúÄ‰Ω≥ÂÆûË∑µÊåáÂçó](https://example.com/best-practices)

## üìà ÂêéÁª≠Âª∫ËÆÆ

> Âü∫‰∫éÂΩìÂâçÁöÑÂÆûÁé∞ÔºåÊàëÂª∫ËÆÆÊÇ®ËÄÉËôë‰ª•‰∏ãÊîπËøõÊñπÂêëÔºö
>
> 1. **Ê∑ªÂä†ÂõΩÈôÖÂåñÊîØÊåÅ** - ‰ΩøÁî® react-i18next
> 2. **ÂÆûÁé∞‰∏ªÈ¢òÂàáÊç¢** - ÊîØÊåÅÊ∑±Ëâ≤/ÊµÖËâ≤Ê®°Âºè
> 3. **‰ºòÂåñÁßªÂä®Á´Ø‰ΩìÈ™å** - ÂìçÂ∫îÂºèËÆæËÆ°

Â∏åÊúõËøô‰∫õ‰ø°ÊÅØÂØπÊÇ®ÊúâÂ∏ÆÂä©ÔºÅÂ¶ÇÊûúÊÇ®Êúâ‰ªª‰ΩïÂÖ∂‰ªñÈóÆÈ¢òÔºåËØ∑ÈöèÊó∂ÂëäËØâÊàë„ÄÇ`,
						createAt: new Date(),
						status: "success",
						model: currentModel,
					};

					this.messages = this.messages.map((msg) =>
						msg.id === typingMessage.id ? assistantMessage : msg,
					);
				}, 1500);
			}, 500);
		}
	};

	clearMessages() {
		this.messages = [];
	}

	updateMessage(messageId: string, content: string) {
		this.messages = this.messages.map((msg) => (msg.id === messageId ? { ...msg, content } : msg));
	}

	addAttachment(attachment: AttachmentFile) {
		this.attachments = [...this.attachments, attachment];
	}

	addAttachments(attachments: AttachmentFile[]) {
		this.attachments = [...this.attachments, ...attachments];
	}

	removeAttachment(id: string) {
		this.attachments = this.attachments.filter((att) => att.id !== id);
	}

	handleThinkingActiveChange(active: boolean) {
		this.isThinkingActive = active;
	}

	handleOnlineSearchActiveChange(active: boolean) {
		this.isOnlineSearchActive = active;
	}

	handleMCPActiveChange(active: boolean) {
		this.isMCPActive = active;
	}

	handleSelectedModelChange(model: Model | null) {
		this.selectedModel = model;
	}

	handlePrivateChatActiveChange(active: boolean) {
		this.isPrivateChatActive = active;
	}
}

export const chatState = new ChatState();
